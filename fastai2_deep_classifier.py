# AUTOGENERATED! DO NOT EDIT! File to edit: fastai2_deep_classifier.ipynb.

# %% auto 0
__all__ = ['bears', 'path', 'dls', 'learn', 'interp', 'learn_inf', 'img', 'notebook_name', 'export_destination',
           'download_grizzly_bear_images', 'download_bear_images']

# %% fastai2_deep_classifier.ipynb 2
import fastbook
fastbook.setup_book()

# %% fastai2_deep_classifier.ipynb 3
from fastbook import *
from fastai.vision.widgets import *
     

# %% fastai2_deep_classifier.ipynb 6
from icrawler.builtin import BingImageCrawler  # or GoogleImageCrawler, BaiduImageCrawler

# download grizzly bear images
def download_grizzly_bear_images(num_images=150, download_dir='grizzly_bear'):
    crawler = BingImageCrawler(storage={'root_dir': download_dir})
    crawler.crawl(keyword='grizzly bear', max_num=num_images)

download_grizzly_bear_images(num_images=150)


# %% fastai2_deep_classifier.ipynb 7
# generalise function to other types of bears

bears = ["grizzly","black","teddy"]

def download_bear_images(bears,num_images=150):
    for x in bears:
        download_dir= f'{x}_bear'
        crawler = BingImageCrawler(storage={'root_dir': download_dir})
        crawler.crawl(keyword=f'{x} bear', max_num=num_images)

        
        
        
download_bear_images(bears, num_images=150)

# %% fastai2_deep_classifier.ipynb 8
bears = DataBlock(
    blocks=(ImageBlock, CategoryBlock), 
    get_items=get_image_files, 
    splitter=RandomSplitter(valid_pct=0.2, seed=42),
    get_y=parent_label,
    item_tfms=Resize(128))

# %% fastai2_deep_classifier.ipynb 10
path = Path('bears')
dls = bears.dataloaders(path)
     

# %% fastai2_deep_classifier.ipynb 11
dls.valid.show_batch(max_n=4, nrows=1)

# %% fastai2_deep_classifier.ipynb 12
bears = bears.new(item_tfms=Resize(128, ResizeMethod.Squish))
dls = bears.dataloaders(path)
dls.valid.show_batch(max_n=4, nrows=1)

# %% fastai2_deep_classifier.ipynb 13
bears = bears.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode='zeros'))
dls = bears.dataloaders(path)
dls.valid.show_batch(max_n=4, nrows=1)

# %% fastai2_deep_classifier.ipynb 14
bears = bears.new(item_tfms=RandomResizedCrop(128, min_scale=0.3))
dls = bears.dataloaders(path)
dls.train.show_batch(max_n=4, nrows=1, unique=True)

# %% fastai2_deep_classifier.ipynb 16
bears = bears.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2))
dls = bears.dataloaders(path)
dls.train.show_batch(max_n=8, nrows=2, unique=True)

# %% fastai2_deep_classifier.ipynb 18
bears = bears.new(
    item_tfms=RandomResizedCrop(224, min_scale=0.5),
    batch_tfms=aug_transforms())
dls = bears.dataloaders(path)

# %% fastai2_deep_classifier.ipynb 19
learn = vision_learner(dls, resnet18, metrics=error_rate)
learn.fine_tune(4)
     

# %% fastai2_deep_classifier.ipynb 20
interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix()

# %% fastai2_deep_classifier.ipynb 21
interp.plot_top_losses(5, nrows=1)

# %% fastai2_deep_classifier.ipynb 25
learn.export()

# %% fastai2_deep_classifier.ipynb 26
path = Path()
path.ls(file_exts='.pkl')
     

# %% fastai2_deep_classifier.ipynb 28
learn_inf = load_learner(path/'export.pkl')

# %% fastai2_deep_classifier.ipynb 29
%time learn_inf.predict('bears/black_bear/000003.jpg')

# %% fastai2_deep_classifier.ipynb 30
learn_inf.dls.vocab

# %% fastai2_deep_classifier.ipynb 31
img = PILImage.create('bears/black_bear/000003.jpg')

# %% fastai2_deep_classifier.ipynb 32
# define prediction function

categories = ('black_bear', 'grizzly_bear', 'teddy_bear')

def predict_img(img):
    %time
    pred,idx, probabilities = learn_inf.predict(img)
    return dict(zip(categories, map(float,probabilities)))

# %% fastai2_deep_classifier.ipynb 33
predict_img(img)

# %% fastai2_deep_classifier.ipynb 40
# export jupyter notebook as python script
import nbdev
notebook_name = "fastai2_deep_classifier.ipynb"
export_destination = "." # the root directory
nbdev.export.nb_export(notebook_name, export_destination) 
